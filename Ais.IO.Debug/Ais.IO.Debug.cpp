#include "TestHeader.h"
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/bn.h>
#include <iostream>

enum ASYMMETRIC_KEY_FORMAT {
    ASYMMETRIC_KEY_PEM = 0,
    ASYMMETRIC_KEY_DER = 1,
};

enum ASYMMETRIC_KEY_PKCS {
    ASYMMETRIC_KEY_PKCS8 = 0,
    ASYMMETRIC_KEY_PKCS10 = 1,
    ASYMMETRIC_KEY_PKCS12 = 2,
};

struct RSA_PARAMETERS {
    const size_t KEY_LENGTH;
    unsigned char* N;
    unsigned char* E;
    unsigned char* D;
    unsigned char* P;
    unsigned char* Q;
    unsigned char* DP;
    unsigned char* DQ;
    unsigned char* QI;
    size_t N_LENGTH;
    size_t E_LENGTH;
    size_t D_LENGTH;
    size_t P_LENGTH;
    size_t Q_LENGTH;
    size_t DP_LENGTH;
    size_t DQ_LENGTH;
    size_t QI_LENGTH;
};

struct RSA_KEY_PAIR {
    size_t KEY_LENGTH;
    const ASYMMETRIC_KEY_FORMAT KEY_FORMAT;
    const ASYMMETRIC_KEY_PKCS KEY_PKCS;
    unsigned char* PUBLIC_KEY;
    unsigned char* PRIVATE_KEY;
    const unsigned char* PEM_PASSWORD;
    size_t PUBLIC_KEY_LENGTH;
    size_t PRIVATE_KEY_LENGTH;
    size_t PEM_PASSWORD_LENGTH;
    const SYMMETRY_CRYPTER PEM_CIPHER;
    const int PEM_CIPHER_SIZE;
    const SEGMENT_SIZE_OPTION PEM_CIPHER_SEGMENT;
    const HASH_TYPE HASH_ALGORITHM;
    const char* PKCS12_NAME;
    const char* PKCS12_PASSWORD;
};

struct EXPORT_RSA {
    size_t KEY_LENGTH;
    const ASYMMETRIC_KEY_FORMAT KEY_FORMAT;
    unsigned char* N;
    unsigned char* E;
    unsigned char* D;
    unsigned char* P;
    unsigned char* Q;
    unsigned char* DP;
    unsigned char* DQ;
    unsigned char* QI;
    size_t N_LENGTH;
    size_t E_LENGTH;
    size_t D_LENGTH;
    size_t P_LENGTH;
    size_t Q_LENGTH;
    size_t DP_LENGTH;
    size_t DQ_LENGTH;
    size_t QI_LENGTH;
    const unsigned char* PUBLIC_KEY;
    const unsigned char* PRIVATE_KEY;
    const size_t PUBLIC_KEY_LENGTH;
    const size_t PRIVATE_KEY_LENGTH;
};

#pragma region RsaIO
typedef int (*RsaGetParametersLength)(RSA_PARAMETERS*);
typedef int (*RsaGetKeyLength)(RSA_KEY_PAIR*);
typedef int (*RsaGenerateParameters)(RSA_PARAMETERS*);
typedef int (*RsaGenerateKeys)(RSA_KEY_PAIR*);
typedef int (*RsaExportParameters)(EXPORT_RSA*);
typedef int (*RsaExportKeys)(EXPORT_RSA*);

RsaGetParametersLength RsaGetParametersLength_Func = (RsaGetParametersLength)GET_PROC_ADDRESS(Lib, "RsaGetParametersLength");
RsaGetKeyLength RsaGetKeyLength_Func = (RsaGetKeyLength)GET_PROC_ADDRESS(Lib, "RsaGetKeyLength");
RsaGenerateParameters RsaGenerateParameters_Func = (RsaGenerateParameters)GET_PROC_ADDRESS(Lib, "RsaGenerateParameters");
RsaGenerateKeys RsaGenerateKeys_Func = (RsaGenerateKeys)GET_PROC_ADDRESS(Lib, "RsaGenerateKeys");
RsaExportParameters RsaExportParameters_Func = (RsaExportParameters)GET_PROC_ADDRESS(Lib, "RsaExportParameters");
RsaExportKeys RsaExportKeys_Func = (RsaExportKeys)GET_PROC_ADDRESS(Lib, "RsaExportKeys");
#pragma endregion

void Test_GetRsaParametersLength() {
    RSA_PARAMETERS paramters = {
        4096,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
    };

    RsaGetParametersLength_Func(&paramters);
    std::cout << "Modulus (n) Size:" << paramters.N_LENGTH << std::endl;
    std::cout << "Public Exponent (e) Size:" << paramters.E_LENGTH << std::endl;
    std::cout << "Private Exponent (d) Size:" << paramters.D_LENGTH << std::endl;
    std::cout << "Factor1 (p) Size:" << paramters.P_LENGTH << std::endl;
    std::cout << "Factor2 (p) Size:" << paramters.Q_LENGTH << std::endl;
    std::cout << "Exponent1 (dmp1) Size:" << paramters.DP_LENGTH << std::endl;
    std::cout << "Exponent2 (dmp2) Size:" << paramters.DQ_LENGTH << std::endl;
    std::cout << "Coefficient (iqmp) Size:" << paramters.QI_LENGTH << std::endl;
}

void Test_GetRsaKeyLength() {
    std::string pemPassowrd = "7331323239616263646232";
    std::string p12Name = "Ais IO Debug";
    std::string p12Password = "debug-123456";
    std::string derPublicKey = "3082045A30820242020100300D06092A864886F70D01010B0500300030041F001F00300030820222300D06092A864886F70D01010105000382020F003082020A0282020100F4583DB2BEDAD63CCD901578E0DC486A6A95BD04D552C30DA18D6F3B213CB27C821F6F9CC22B93F4812ACF61A5A42493AC626A80C80211798EBC35FA8C9BC829D7C3EBA6F894CC1940932807BA3365B445710D3F6E5990CC7A8AE40A5E1DD37499D4F28B91A666AEA11B348AB47E8A7EA81185E0E43942560FB4A218123F351F768923B4997D8046531DCC39449C0C3C93BA357293A5306FDA7CB5354E53F0595564AFBF6A0EF1F5FB0187A472EA8046D849E6A5DC86432983B40C21430F0D0E6D9939C5EA85FDF25849F0A2E68DF25C36A98AA1CB38F804CB1E61DA3AB0081E8AD1AE156F9CC8CA4384D04166E8BF93601227128D34B72CBB29A404E1544E88410144556BA08943C6C604C8EFA282E749820FEDA6D261F6E285C9E47BC6FE27D68933DAAA8F1989E6245CEC8CC7E2354BC2724768AF0CB7BFC701C37E4E705C4DCC02E47D47F4F16D2E6780DBEBE0EA052BBDD60BC65326666F7D1ACA57EB19610D2BFDB6CCB5CD20315115B0CD18CDE2D3BB68ACDB80E26CA24326103D1D74F19C531EDAA0963C60B7E35E81AB1838246AFDC226F34C6F644BCD80C65D85B852ECBF49998A9947126D32334E1402B5216E77EEE22945AE35DBB3FB7DE3F1EFDDA5CCC1AC790C72BAC0A092BFE6ABA191293E74FEB9C319BDD2C0445C98F8E0E17F521D78E824FA824FF950F8B09E45ACDD48BAE334B8D8F5735CA36AE5C2CB0203010001300D06092A864886F70D01010B05000382020100F4456281DC61537FE37921F160C0FC313A5A9F488036CF1E9547486FEAE32BDABCC7D4C36C317D95E3FBCD91D7E5C99A78D9D5DCFD9F63CC44487DAA69B66D33EF67262E5822EE9C7C5F861CCD484DC0E0929B50CA5B84E8835E566608142730C63EEFA38E5FEAE234AAA100B8861EBB57C870FF1CEFE06B0942A33665471429067836028ACE51A754BAF2A108358DC45720A6579EB07E81D38568786D29A42B46903CD1AA1697B253637ACE5B62CE755C58AB47B9BBC149869EBBFE806575B3BFD63052F802D553624EA09A949D083DA870FECF84E47C8DD6AC4C7BFC7294735FA3AB785C962064034268B8BFD65BB57208E15A5CA290509A45903025711BD089621E8904C023B0CEA2800AFA4714B8309D490FBF121257B0C939A1B88648936C21D8CFD68469EEEFA509B5C59FDD3EAF9E7E3278DE9C5663DB89C9D169B6619F01DD1303654AABB559B7730304D17C9F827ABE0CEA9CB00D07D3E608EACB140EC3C65004E112C1512BDF756A71AA1B8C5DC176672F956847D81F7DE0B00C08E8B9A5B8637195888B019F7DB0F0E8A6A6F4305DBE896B4890F001967AD5351F23E78D9EC5D9DFFE65238E95C7956A12722444794660B8F6B501CF065E63A0B9B71A3AAA00054AF8C7866B917CD3D59ACCE90E31D0D5DFF04BEC98FCFABBA6E98183A9675BE8B40CF87AC06EC9BE2A844F5CBE8F39167904B88729A81A24BE24";
    std::string derPrivateKey
    std::string pemPublicKey =
        // "-----BEGIN CERTIFICATE-----\n"
        // "MIIEWjCCAkICAQAwDQYJKoZIhvcNAQELBQAwADAEHwAfADAAMIICIjANBgkqhkiG\n"
        // "9w0BAQEFAAOCAg8AMIICCgKCAgEApMPHEZzz28QE/5q5jghnaqBJDav3c0YrI36y\n"
        // "uqTNt2oQ3wQoMWkOeBb7nryU8HLYlVWVTlfNNTs9J8xEWfXXqKJ2uZ69hSxxJsSK\n"
        // "QL81r4HUBeZaXcS2mEYjh3yhCFG2uUmWVuHpRSSHxxmKRGS+0GImT8E7/No4MdQr\n"
        // "6jHgLjIPD1Wv5QU7XrMNH0zpfyKr/nzrCv9Gd3azNs7wudS/gj/gHxnehJDfKC6Y\n"
        // "+LgwueHJzDT2wP/2b6Rdy7SmAMGfSIsLHY0oQ4YlLZPzKD8VBYSI26vcaO5TgKCd\n"
        // "N95NTjEjZ1qzO1hlEXkzUZedFr5TcPAd13YTjrsSgzz5VmkkpuabJogeafObs0W7\n"
        // "3T5nZmn+YUIbWfG+EKUKKAJ3tgQprYlo+0hCTBsg+kJRLwLy8YqSQ3TjYpi/jT7u\n"
        // "PVdfthjsSGr9WxYmHwIcYux3dp0JpmgbLkjwiC54rYTBrrSf4RMl4VyJcbpyuwK1\n"
        // "Td7LGKamqzey5ZJxmKFJwqfn+RERH0qlTWLW1DyO0hWcU58fwPIHpSjblK1VIYJX\n"
        // "ZxuqYO8RxQyyJM+nGeep5RK449QJ7wLuDVLccJb8l3IhqdG/ANkFeWNIfMp8od0a\n"
        // "bffjSjJL0u5QxrrJflKnY4pzktUwxIdPhNxvbl+WHlc7OyzP5m6mypQa6eGZb2ks\n"
        // "32V6nxMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAfDk87tqbka78BehmaI1Guq0h\n"
        // "/QP8c2X1V2ZpqGXhlgl06vfr6fL9GcK1MPgIexjmo/uKRI20CZi00xGB6wuz1ttj\n"
        // "h4zCf7qa4gK3X3TlwkURbgY+ojwHSeThqfBdDCmkGv3/gOOKjFuTXoOv+p7LIvUh\n"
        // "aM3F/XgPzZxsKUQLjgcoFr/pmbb3poM2/rGVzlV4GPkNxX/Kvky5E1QJVR67IMSb\n"
        // "h7r67O/2M4RrHM6eFleXbgjvmKUDbLUBiNEjkTvCzy2giV4KyIPLvq+07/QqVcCT\n"
        // "tE2+LqEiZmorwZDYjIoMgnOpx2IqNsvk/MvDn9xakmjh+QBIfu1gFNetacgmdtwU\n"
        // "SedJsaI+IeaPitck/ZNBxOy8XOdYOVYM9S4qTHEWg3cZMqmhUh+Z0d086uwrvG0/\n"
        // "o1bCLUHshnXjv/JpAMWRJih4jlQCM8EdYvs62rlZgSe+nVjLKXdZaqFVeX+3Fcel\n"
        // "uYoHodml/XyvnOB3tIDJiJQGTSlturvkeOfj2Mr/CTjiV48tdxw7HFC+B3c7R5cz\n"
        // "J/RCnTBoSeNnSPF+r/uLL97cC7F9zkkpACN5kIVNAXAUgR0c1p32AWDElCqrXMJn\n"
        // "DCekzUULxID5CT9ipAwhW55YENAqAaBI7dMHfxVAKWgs5F+ictnErcR9dLSi1nix\n"
        // "EybT4JgTliFaUMvI5DQ=\n"
        // "-----END CERTIFICATE-----\n"
        // "";
        "-----BEGIN CERTIFICATE-----\n"
        "MIICWjCCAUICAQAwDQYJKoZIhvcNAQELBQAwADAEHwAfADAAMIIBIjANBgkqhkiG\n"
        "9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjkfv3ul8S4hmJ95aZ9DKTsurBn9JU4BzK6Zx\n"
        "+TPYMFjdCojzQndas2tS4KYG8CSMBoQwox5LAu/UgzXbT8umyG816yKzbKuP7meA\n"
        "z3YBO1TlDTeMRAU1yZCpeP697zvDIo7/KRZUCMCKKdbsOLOvfbcZqIApYSf2usUX\n"
        "GNz+D3XT+26eITVvi+BjcNGemA0uP2c9US/L09G8DWg8GDEkf3wd1SosyiYzhMo2\n"
        "sxzvFfdhjog91jMNhvTxwx6N03IJwrWHdV9WCWXhekm7alsbTlftx+nBP7bKDMRO\n"
        "w3h46eW7AWT+Ci2Ii/JYFIr3m9is5eo6gTFXSaF9XKc8GD43FwIDAQABMA0GCSqG\n"
        "SIb3DQEBCwUAA4IBAQAkAYXxMfsYu+cqt2S4iGLbzMJXOCBuc0k5RJ0WrV6ya2j7\n"
        "5ULnDqUkvRkvmhSWqYQm9YqYkYA1k/r37l65u79nbebe+XX9UMrFv6A7NfhNwTut\n"
        "JyQBAkOFbSA7DlF++pzr3XzaUbJo26rcrEyPynO8ZZSnNO3VjFgk40SLi3MrvIHf\n"
        "oYKmWyEG+6hJef6b0+YNMfflzhHI4jB+rRY2CQH4aMNLnEySXF3O1jETPeQjh0F5\n"
        "4tw7tgcwbUaq470ZMTlx3vEIf44Al+kMruywyBhtQfdF8YwXilbPR6EFtlm1XN4r\n"
        "3x+tAhZSWvu6VampviDj8b/gpmV8fDJ8uwTWqXzz\n"
        "-----END CERTIFICATE-----\n"
        "";

    std::string pemPrivateKey =
        // "-----BEGIN PRIVATE KEY-----\n"
        // "MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQCkw8cRnPPbxAT/\n"
        // "mrmOCGdqoEkNq/dzRisjfrK6pM23ahDfBCgxaQ54FvuevJTwctiVVZVOV801Oz0n\n"
        // "zERZ9deoona5nr2FLHEmxIpAvzWvgdQF5lpdxLaYRiOHfKEIUba5SZZW4elFJIfH\n"
        // "GYpEZL7QYiZPwTv82jgx1CvqMeAuMg8PVa/lBTtesw0fTOl/Iqv+fOsK/0Z3drM2\n"
        // "zvC51L+CP+AfGd6EkN8oLpj4uDC54cnMNPbA//ZvpF3LtKYAwZ9IiwsdjShDhiUt\n"
        // "k/MoPxUFhIjbq9xo7lOAoJ033k1OMSNnWrM7WGUReTNRl50WvlNw8B3XdhOOuxKD\n"
        // "PPlWaSSm5psmiB5p85uzRbvdPmdmaf5hQhtZ8b4QpQooAne2BCmtiWj7SEJMGyD6\n"
        // "QlEvAvLxipJDdONimL+NPu49V1+2GOxIav1bFiYfAhxi7Hd2nQmmaBsuSPCILnit\n"
        // "hMGutJ/hEyXhXIlxunK7ArVN3ssYpqarN7LlknGYoUnCp+f5EREfSqVNYtbUPI7S\n"
        // "FZxTnx/A8gelKNuUrVUhgldnG6pg7xHFDLIkz6cZ56nlErjj1AnvAu4NUtxwlvyX\n"
        // "ciGp0b8A2QV5Y0h8ynyh3Rpt9+NKMkvS7lDGusl+UqdjinOS1TDEh0+E3G9uX5Ye\n"
        // "Vzs7LM/mbqbKlBrp4ZlvaSzfZXqfEwIDAQABAoIB/0rqUzLiKmVb7oN9Ca5XvXq9\n"
        // "zOAEHbJMNVEhfbwsZinMEEYjnbxzO1Qr69ZBG93R89uMQYoqYfCe/skZsS2cmnIS\n"
        // "n+j5d5kVzynRZqTWsl8aqOZsPRDL+joPQ7HwknrPeXjF/Mi3iPK0D9VELgCEmwrx\n"
        // "la0UL2WVbMRugSLH8SapnC9cxp1bXTzk+Xjbf7XodEuogNAY24sPoNNK3imgkj/Z\n"
        // "/nQltW3EcUygsCBm0o2yHA8kBdruhx6iamnOhnkEw844NzwFWRYngfM3UiT6iceS\n"
        // "FQ6ZfGsGWIrwfIu3VQie6K1I9pwFLrv2X8WGXYBgPMODnUEnO71DuFpaK9GEyfGQ\n"
        // "ot76G6aItR3EP03bEOwoWS9aQa55/iv2MnroS6e2CdAXcOSDuVccKEQbCIpAGfz3\n"
        // "ADvn4aqOJFAOh796gaJtkH/7oewp0kSPDKrhOuBXjxU/YDVxvfpccHQOQYt9+JsN\n"
        // "SR8Aereq8Bho7N65nLf4JVgyoJmUHRJskHllhUp9DsQBC0Iv16arTQx2KqN+IvlT\n"
        // "95bdUZnLJieCN0JBO7k3KJBlhY0aYsmdbTvmkrr+6kFU/oJMUwJ/ImzTAt2hNXuO\n"
        // "0aoemSYJ2jFtGwEdbLDGy1tidqfZc3u4ayIVctAHmJkm68sR2ZVkeEQcVxQTfwWJ\n"
        // "WpUXU7e9G89SccilEdECggEBAOUC40sXC2dZN/rJOZMlX8Z4p5VjrnlrPEwY4o2N\n"
        // "umvszo53cXMIa0y+w3uiRAQcVuXuhaKm0M9HVQzJcHfyfoSBnrzKjcV8SYIsXF8V\n"
        // "oB39Xe+lQawwxOuEskd/ew0htgNJf8zTKEpYPNOI4qX+BzdZTC1Cm6zQuZrkAvnL\n"
        // "ORzw5EV2qgr6i5HgmHJrLNnfOYHVDqdXeWY7WiRkGW5S6OWihPkPj00fCV1dzqSP\n"
        // "19zBjh7eO+vlWB0hrsWrvUqzhmFYQzsRilfTlS3OID/52snKY1QVl76VwwxiWb/g\n"
        // "ESj/+x+sebESGx/vL3d0I/U9iQZpNNUeCLUFk1SL/uEjgLcCggEBALgundIwN07F\n"
        // "czZauzHr3Fwb2D44eXkKJWHO3r0a49PaglLML1GrrpZOeQ6aJN+EQ9ggqjuMr53n\n"
        // "y42KZezxXf38anS5m56kfLDxuiv1Sc1EFzES1NDCyvO9aB3JrZw9u7njCdYWy1BP\n"
        // "zCemhmH3o4KDqfD9DL47JtwXPK/iDjqd6YKFl9bCP5/KHgIrNnmmbjlYKHh7Km0K\n"
        // "DvAM4xMv7dASe/82fiSKEInTdSkWEG7TQ1EKAna6KEPf62dSiXfs4Xfklb4R2UuC\n"
        // "tkyNVgfnOU18vmJS2PawXFOufM90gQ+UkvnZRF8sYhxYgkVfTpqYv2yxcnVKRqNI\n"
        // "UQQ76m/9QIUCggEBAIsuZCFA0idva7w5C4rIThr7PS5ntKQKbkz5WscY+dGZzDd9\n"
        // "lC+LUFsGHRxIk/nDl3SKsCEYLROskJ4C1x2u/QFfHbAzklIRpUM93q3TIMrZL3vz\n"
        // "/aO+yA8zSH53lbt3X31D8C31ryjv05fkO4sShiQ3Wzqunpo7CHKAXOafggh6xuEI\n"
        // "q3OcrbJsw3nWdR28suCbMhq16QweyjwPsf0A2palXRdZQ4hlcnWSC4KsAU8jO1K7\n"
        // "UcOeURzzWZq9M3/w95y13bZKhL+30ZRTD/qRyUyWeiOiM+Uac75VD6KzdPpsCJ1J\n"
        // "X3QkQuP3o+t/ZFMpoNuKmRdk93m897uMkc0WnKUCggEBAK/7+tiHMZGWoItjDlKY\n"
        // "5ykrgeeR1p+MzkMygyl1tBMNSlEKwHvs6xi7SnhlWK4plxm/vGjB+FuMy7Ymc1V/\n"
        // "GyxALwfxAX0H9gysLBMsgKQdV3uQXsBKH9ndNMqhlb0gT2tCQHfLt+C5Hn0UZHrf\n"
        // "P+DJJWwanj52Dp9lpJr6CFaB5EjOlVKisGBho2K3H4oFOHSag7D7HoKphbRg2+fN\n"
        // "eBHEV653xvfq4/qNjfkAGBuMyVl5kvkWzrpsDmXfO3LXaGhChcHjFBlOgBmNQpKy\n"
        // "oNIlS1RvjNfJk65xntgqndbhQ75vlyDJK8Wh3HekpVqacO3Ob2sa2XvS8XZ2OX9g\n"
        // "IHECggEBANgYSKFfBSTNT7+CE6z4e0tg3xDlxwVS/4R4z6OVyNltzGlY78WvTkGj\n"
        // "Hh90IcTrEqA8tEN12NANyEi4MKNU8xoq2XFmeF/Edf1dvOuL7chpG065ZytpHqM3\n"
        // "UWeMqlozjOLX0idg5pu3AQC1ckLA39xDT3RVuVKnhMZPp3t/g0cOEs+SL86iiu7R\n"
        // "gqgAzWOK4OGuI3s64clsHe3P1u7/7LnAyqeeM5WhSSz/54Y8OEwKyteItscyw7RL\n"
        // "PSbR7GLAME+nGkBVzLZQJZdP13Cb/rjUm5Zp99gYKiOtO7w8C9zhtb1OfJB75dNm\n"
        // "tO/VFx9DtbUATxDzxVCzBbxUtN4x/BU=\n"
        // "-----END PRIVATE KEY-----\n"
        // "";
        "-----BEGIN ENCRYPTED PRIVATE KEY-----\n"
        "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\n"
        "-----END ENCRYPTED PRIVATE KEY-----\n"
        "";


    std::vector<unsigned char> pemPass;
    pemPass.resize(pemPassowrd.size() / 2);
    Base16Decode_Func(pemPassowrd.c_str(), pemPassowrd.size(), pemPass.data(), pemPass.size());
    pemPass.push_back('\0');

    std::vector<unsigned char> publicKey;
    std::vector<unsigned char> privateKey;
    /*publicKey.resize(derPublicKey.size() / 2);
    privateKey.resize(derPrivateKey.size() / 2);
    Base16Decode_Func(derPublicKey.c_str(), derPublicKey.size(), publicKey.data(), publicKey.size());
    Base16Decode_Func(derPrivateKey.c_str(), derPrivateKey.size(), privateKey.data(), privateKey.size());*/
    publicKey.resize(pemPublicKey.size());
    privateKey.resize(pemPrivateKey.size());
    publicKey.assign(pemPublicKey.begin(), pemPublicKey.end());
    privateKey.assign(pemPrivateKey.begin(), pemPrivateKey.end());
    RSA_KEY_PAIR length = {
        0,
        ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_PEM,
        ASYMMETRIC_KEY_PKCS::ASYMMETRIC_KEY_PKCS12,
        publicKey.data(),
        privateKey.data(),
        pemPass.data(),
        publicKey.size(),
        privateKey.size(),
        pemPass.size(),
    };
    RsaGetKeyLength_Func(&length);
    
    std::cout << "Key Length (Bits):" << length.KEY_LENGTH << std::endl;
}

void Test_GenerateRsaParameters() {
    RSA_PARAMETERS paramters = {
        2048,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    };

    RsaGetParametersLength_Func(&paramters);

    paramters.N = new unsigned char[paramters.N_LENGTH];
    paramters.E = new unsigned char[paramters.E_LENGTH];
    paramters.D = new unsigned char[paramters.D_LENGTH];
    paramters.P = new unsigned char[paramters.P_LENGTH];
    paramters.Q = new unsigned char[paramters.Q_LENGTH];
    paramters.DP = new unsigned char[paramters.DP_LENGTH];
    paramters.DQ = new unsigned char[paramters.DQ_LENGTH];
    paramters.QI = new unsigned char[paramters.QI_LENGTH];

    RsaGenerateParameters_Func(&paramters);

    std::vector<char> paramtersString;
    paramtersString.resize(paramters.N_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.N, paramters.N_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Modulus (n), Size:" << paramters.N_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.E_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.E, paramters.E_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Public Exponent (e), Size:" << paramters.E_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.D_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.D, paramters.D_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Private Exponent (d), Size:" << paramters.D_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.P_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.P, paramters.P_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Factor1 (p), Size:" << paramters.P_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.Q_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.Q, paramters.Q_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Factor2 (p), Size:" << paramters.Q_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.DP_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.DP, paramters.DP_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Exponent1 (dmp1), Size:" << paramters.DP_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.DQ_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.DQ, paramters.DQ_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Exponent2 (dmp2), Size:" << paramters.DQ_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.QI_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.QI, paramters.QI_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Coefficient (iqmp), Size:" << paramters.QI_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();
}

void Test_RsaGenerate() {
    std::string pemPassowrd = "7331323239616263646232";
    std::string p12Name = "Ais IO Debug";
    std::string p12Password = "debug-123456";
    std::vector<unsigned char> pemPass;
    pemPass.resize(pemPassowrd.size() / 2);
    Base16Decode_Func(pemPassowrd.c_str(), pemPassowrd.size(), pemPass.data(), pemPass.size());
    for (int i = 0; i < 1; i++) {
        size_t keysize = 2048;
        std::vector<unsigned char> publicKey;
        std::vector<unsigned char> privateKey;
        publicKey.resize(keysize * 2);
        privateKey.resize(keysize * 2);
        RSA_KEY_PAIR keypair = {
            keysize,
            ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_PEM,
            ASYMMETRIC_KEY_PKCS::ASYMMETRIC_KEY_PKCS12,
            publicKey.data(),
            privateKey.data(),
            pemPass.data(),
            publicKey.size(),
            privateKey.size(),
            pemPass.size(),
            SYMMETRY_CRYPTER::SYMMETRY_AES_CBC,
            256,
            SEGMENT_SIZE_OPTION::SEGMENT_NULL,
            HASH_TYPE::HASH_SHA2_256,
            p12Name.c_str(),
            p12Password.c_str(),
        };
        RsaGenerateKeys_Func(&keypair);

        publicKey.resize(keypair.PUBLIC_KEY_LENGTH);
        privateKey.resize(keypair.PRIVATE_KEY_LENGTH);

        std::cout << "PEM - [" << i << ". Size:" << keypair.PUBLIC_KEY_LENGTH << ", " << keypair.PRIVATE_KEY_LENGTH << "]" << std::endl;
        std::cout << reinterpret_cast<char*>(publicKey.data()) << std::endl;
        std::cout << reinterpret_cast<char*>(privateKey.data()) << std::endl;
    }

    for (int i = 0; i < 1; i++) {
        size_t keysize = 2048;
        std::vector<unsigned char> publicKey;
        std::vector<unsigned char> privateKey;
        publicKey.resize(keysize * 2);
        privateKey.resize(keysize * 2);
        RSA_KEY_PAIR keypair = {
            keysize,
            ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_DER,
            ASYMMETRIC_KEY_PKCS::ASYMMETRIC_KEY_PKCS12,
            publicKey.data(),
            privateKey.data(),
            NULL,
            publicKey.size(),
            privateKey.size(),
            0,
            SYMMETRY_CRYPTER::SYMMETRY_NULL,
            0,
            SEGMENT_SIZE_OPTION::SEGMENT_NULL,
            HASH_TYPE::HASH_NULL,
            NULL,
            NULL,
        };
        RsaGenerateKeys_Func(&keypair);

        publicKey.resize(keypair.PUBLIC_KEY_LENGTH);
        privateKey.resize(keypair.PRIVATE_KEY_LENGTH);

        std::cout << "DER - [" << i << ". Size:" << keypair.PUBLIC_KEY_LENGTH << ", " << keypair.PRIVATE_KEY_LENGTH << "]" << std::endl;
        char* pubString = new char[keypair.PUBLIC_KEY_LENGTH * 2 + 1] {};
        char* privString = new char[keypair.PRIVATE_KEY_LENGTH * 2 + 1] {};
        Base16Encode_Func(publicKey.data(), publicKey.size(), pubString, keypair.PUBLIC_KEY_LENGTH * 2 + 1);
        Base16Encode_Func(privateKey.data(), privateKey.size(), privString, keypair.PRIVATE_KEY_LENGTH * 2 + 1);
        std::cout << pubString << std::endl;
        std::cout << privString << std::endl;
        std::cout << "" << std::endl;
    }
}

void Test_ExportRsaParametersFromKeys() {
    std::string derPublicKey = "30820122300D06092A864886F70D01010105000382010F003082010A0282010100C3779422AAF0CB7740E8EA3664AE204B24A55FFBB5154CC24B43CA2D3917B957E01912185D1E6DC50E7F1F3DBD291FB5A3DFAC92B9F0833AE10C363D2D47BF1B43F42B3991AF9B4A3A4CBEF8CA6ABF1CAEA7659F8AD8E5098C2172D0DE6C61D11926C2F5BA6F1676F52058BC9126A8DF0E4DD6637383D86BFC8A44319017E9AD851DFC302F24895E7E757B0A9E5AD8E354F9B4888D7BFF55FB93298E1EB21F87040BED2E1A97C2BE5C1CD691F1BC1D114E21A4DF1891CDB84277A921B042E39F8E5DE3697F9C256672B3DC4F31B49B864CC29D7BB3F3B0630D15CCCB4DA0BA086C115E9AFB8645E384C3205E1363A3BFD0856F1EB012D8B19901B62D86F581E90203010001";
    std::string derPrivateKey
    std::string pemPublicKey = 
    "-----BEGIN PUBLIC KEY-----\n"
    "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu55P0TmB9ajqmU0fLElR\n"
    "Rq4fdp548rRI4Hv1ZFmmlCYV74xnqNqgIrH2QtOi0BsGF0Q/P26UacvxvJKYQmYD\n"
    "1Ws6GSmhA8i7zPxI9rKB8XYlhKBqnXo53J5KvcNza332QXiyhR1sfu2fIvdSWPx0\n"
    "pRPwiwE1xSJybyjdtKiN7tsSzqodUMC8AXDL3dQR9QlwAWA2RV9YgmLHuZCWbdFv\n"
    "urW2FWogF1zK8GF7BJB7xQy8xYjtU9laigeaPpHMCPPb4yWjvkw0yo9Qy8oUVWzJ\n"
    "+1O/buuyo/K9t9aPe4V0aLrSilAS05k2+BXGuMdEE6qLUDxwvD3xaYdiPtNLfpsR\n"
    "wwIDAQAB\n"
    "-----END PUBLIC KEY-----\n"
    "";
    std::string pemPrivateKey =
    "-----BEGIN PRIVATE KEY-----\n"
    "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7nk/ROYH1qOqZ\n"
    "TR8sSVFGrh92nnjytEjge/VkWaaUJhXvjGeo2qAisfZC06LQGwYXRD8/bpRpy/G8\n"
    "kphCZgPVazoZKaEDyLvM/Ej2soHxdiWEoGqdejncnkq9w3NrffZBeLKFHWx+7Z8i\n"
    "91JY/HSlE/CLATXFInJvKN20qI3u2xLOqh1QwLwBcMvd1BH1CXABYDZFX1iCYse5\n"
    "kJZt0W+6tbYVaiAXXMrwYXsEkHvFDLzFiO1T2VqKB5o+kcwI89vjJaO+TDTKj1DL\n"
    "yhRVbMn7U79u67Kj8r231o97hXRoutKKUBLTmTb4Fca4x0QTqotQPHC8PfFph2I+\n"
    "00t+mxHDAgMBAAECggEAB/a7K5s1zYArM8ZRcEH3yGNuuXcWP4hwiXrUL+Ya9dyR\n"
    "/3Y7FjCa2IOA+6rbv9qjImIGuey53Fhy/TlPFjkZ/jlMINz3/970PcoTAh8R+KEL\n"
    "tvqk2+S1cmG+XsSzmwNLQdHbk16W3Y0SPVvjK8d3ig7zyGq3kL5wE2Ytgal1RjIF\n"
    "NiorOgLn4hQbE4sHHgX4GPGVZKl09ZQVlCuOICaK7o80y6o52DFGW2qQr+HBdMfm\n"
    "y1fHH0hCNaWmbhPLKYsSLT9TtgzJFFc2H2anZdhN0oQJ0NbJAHqLZ5xMPRaFpXWV\n"
    "8/+2qsWzVFFTk9LpaIyxCKNhgKd5S9Y39HtRS4RbwQKBgQD/6nbX9wkMMJNDVlj6\n"
    "4Bs1kwpeXg/bi19MxsjQRqDJN4KWnZiwWTTtx4xuZU6yhB8VF27iA9lKeYiN0GMn\n"
    "tuwn3gMGTJNQtMsz2WKMNuBMLRlaRpWHFWvtHwtP96eBnajA1jPVZwm9IKsh4jzL\n"
    "f6Y9KlVFgWPe3NJ8pffiC4BigwKBgQC7rhmm2bKaumWUN9agJjVGuXUlqHCq5dTa\n"
    "1LysTj1L34jjil/oGsDSQJEQQxFhVoV9il+yCsb6GCW3GgjrhGxf1VPaQPrI5SpD\n"
    "0T/u5ZD8PBbALqV672zjwSyvvEz8iMpvbIOtRGdINRGqLVJzuEAZU18cgKfM42ik\n"
    "YOVPVF5vwQKBgDFwpXcBhaDyPXDz3IrTAs6t0oH6oAuk+EtH2AHMs0FMVREt7xKa\n"
    "mUwakfm93p9EQRD9DvHhFnh51DS5fn5sq2DkVidAYfFkjCE/LPeznk95Iv26xyZq\n"
    "sAgGSFQxnw2+XJyshSUEG/CKwCTypRYXWhFU/VZJMfcbKBrmoWXtHOdrAoGAL8rx\n"
    "C1Uqr05CKdFiXVv9eyolE9bmAg8O+j7sYPB3mYeuA0usip2tdp0sk7iQh3oR+lsv\n"
    "bVZjPzLA//SoStlpA6p+dPjRJDF/Zs+1eS+KkUD4Bi6aw0iPMRxzNbk83Z4z9tXq\n"
    "XkgqCPBCtFRgR8mmwQxDDy4QDRPoBNwL6PyyI8ECgYEA8XjevvGoEsUPB8AYNfVd\n"
    "XsXBtx+Wf+3fzSvF3MOop5HTo5KVAbnFnlu6Bp9XPGamO7soug0gred1aHue4C7y\n"
    "2C+bhizuuHEhnpCy9xixLTeVxzwFW3ZGQ3+eqsco1qjpMkUpEozTp1N1Q56iZKnG\n"
    "HBf0I0ENN9uLICfyDVKdjuQ=\n"
    "-----END PRIVATE KEY-----\n"
    "";
    std::vector<unsigned char> publicKey;
    std::vector<unsigned char> privateKey;
    /*publicKey.resize(derPublicKey.size() / 2);
    privateKey.resize(derPrivateKey.size() / 2);
    Base16Decode_Func(derPublicKey.c_str(), derPublicKey.size(), publicKey.data(), publicKey.size());
    Base16Decode_Func(derPrivateKey.c_str(), derPrivateKey.size(), privateKey.data(), privateKey.size());*/
    publicKey.resize(pemPublicKey.size());
    privateKey.resize(pemPrivateKey.size());
    publicKey.assign(pemPublicKey.begin(), pemPublicKey.end());
    privateKey.assign(pemPrivateKey.begin(), pemPrivateKey.end());
    //RSA_KEY_PAIR keyLength = {
    //    0,
    //    //ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_DER,
    //    ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_PEM,
    //    ASYMMETRIC_KEY_PKCS::ASYMMETRIC_KEY_PKCS8,
    //    publicKey.data(),
    //    privateKey.data(),
    //    publicKey.size(),
    //    privateKey.size(),
    //};

    //RsaGetKeyLength_Func(&keyLength);

    RSA_PARAMETERS paramLength = {
        //keyLength.KEY_LENGTH,
        0,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
    };

    RsaGetParametersLength_Func(&paramLength);

    EXPORT_RSA paramters = {
        0,
        ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_PEM,
        new unsigned char[paramLength.N_LENGTH],
        new unsigned char[paramLength.E_LENGTH],
        new unsigned char[paramLength.D_LENGTH],
        new unsigned char[paramLength.P_LENGTH],
        new unsigned char[paramLength.Q_LENGTH],
        new unsigned char[paramLength.DP_LENGTH],
        new unsigned char[paramLength.DQ_LENGTH],
        new unsigned char[paramLength.QI_LENGTH],
        paramLength.N_LENGTH,
        paramLength.E_LENGTH,
        paramLength.D_LENGTH,
        paramLength.P_LENGTH,
        paramLength.Q_LENGTH,
        paramLength.DP_LENGTH,
        paramLength.DQ_LENGTH,
        paramLength.QI_LENGTH,
        publicKey.data(),
        privateKey.data(),
        publicKey.size(),
        privateKey.size(),
    };

    RsaExportParameters_Func(&paramters);

    std::cout << "Key Length (Bits):" << paramters.KEY_LENGTH << std::endl;

    std::vector<char> paramtersString;
    paramtersString.resize(paramters.N_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.N, paramters.N_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Modulus (n), Size:" << paramters.N_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.E_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.E, paramters.E_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Public Exponent (e), Size:" << paramters.E_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.D_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.D, paramters.D_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Private Exponent (d), Size:" << paramters.D_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.P_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.P, paramters.P_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[First Prime Factor (p), Size:" << paramters.P_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.Q_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.Q, paramters.Q_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Second Prime Factor (q), Size:" << paramters.Q_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.DP_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.DP, paramters.DP_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[First CRT Exponent (dp), Size:" << paramters.DP_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.DQ_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.DQ, paramters.DQ_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[Second CRT Exponent (dq), Size:" << paramters.DQ_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();

    paramtersString.resize(paramters.QI_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.QI, paramters.QI_LENGTH, paramtersString.data(), paramtersString.size());
    std::cout << "[CRT Coefficient (qi), Size:" << paramters.QI_LENGTH << " ]\n" << paramtersString.data() << std::endl;
    paramtersString.clear();
}

void Test_ExportRsaKeyFromParameters() {
    std::vector<unsigned char> Modulus;
    std::vector<unsigned char> PublicExponent;
    std::vector<unsigned char> PrivateExponent;
    std::vector<unsigned char> Factor1;
    std::vector<unsigned char> Factor2;
    std::vector<unsigned char> Exponent1;
    std::vector<unsigned char> Exponent2;
    std::vector<unsigned char> Coefficient;
    std::string Modulus_str = "BB9E4FD13981F5A8EA994D1F2C495146AE1F769E78F2B448E07BF56459A6942615EF8C67A8DAA022B1F642D3A2D01B0617443F3F6E9469CBF1BC9298426603D56B3A1929A103C8BBCCFC48F6B281F1762584A06A9D7A39DC9E4ABDC3736B7DF64178B2851D6C7EED9F22F75258FC74A513F08B0135C522726F28DDB4A88DEEDB12CEAA1D50C0BC0170CBDDD411F50970016036455F588262C7B990966DD16FBAB5B6156A20175CCAF0617B04907BC50CBCC588ED53D95A8A079A3E91CC08F3DBE325A3BE4C34CA8F50CBCA14556CC9FB53BF6EEBB2A3F2BDB7D68F7B857468BAD28A5012D39936F815C6B8C74413AA8B503C70BC3DF16987623ED34B7E9B11C3";
    std::string PublicExponent_str = "010001";
    std::string PrivateExponent_str = "07F6BB2B9B35CD802B33C6517041F7C8636EB977163F8870897AD42FE61AF5DC91FF763B16309AD88380FBAADBBFDAA3226206B9ECB9DC5872FD394F163919FE394C20DCF7FFDEF43DCA13021F11F8A10BB6FAA4DBE4B57261BE5EC4B39B034B41D1DB935E96DD8D123D5BE32BC7778A0EF3C86AB790BE7013662D81A975463205362A2B3A02E7E2141B138B071E05F818F19564A974F59415942B8E20268AEE8F34CBAA39D831465B6A90AFE1C174C7E6CB57C71F484235A5A66E13CB298B122D3F53B60CC91457361F66A765D84DD28409D0D6C9007A8B679C4C3D1685A57595F3FFB6AAC5B354515393D2E9688CB108A36180A7794BD637F47B514B845BC1";
    std::string Factor1_str = "FFEA76D7F7090C3093435658FAE01B35930A5E5E0FDB8B5F4CC6C8D046A0C93782969D98B05934EDC78C6E654EB2841F15176EE203D94A79888DD06327B6EC27DE03064C9350B4CB33D9628C36E04C2D195A469587156BED1F0B4FF7A7819DA8C0D633D56709BD20AB21E23CCB7FA63D2A55458163DEDCD27CA5F7E20B806283";
    std::string Factor2_str = "BBAE19A6D9B29ABA659437D6A0263546B97525A870AAE5D4DAD4BCAC4E3D4BDF88E38A5FE81AC0D240911043116156857D8A5FB20AC6FA1825B71A08EB846C5FD553DA40FAC8E52A43D13FEEE590FC3C16C02EA57AEF6CE3C12CAFBC4CFC88CA6F6C83AD4467483511AA2D5273B84019535F1C80A7CCE368A460E54F545E6FC1";
    std::string Exponent1_str = "3170A5770185A0F23D70F3DC8AD302CEADD281FAA00BA4F84B47D801CCB3414C55112DEF129A994C1A91F9BDDE9F444110FD0EF1E1167879D434B97E7E6CAB60E456274061F1648C213F2CF7B39E4F7922FDBAC7266AB008064854319F0DBE5C9CAC8525041BF08AC024F2A516175A1154FD564931F71B281AE6A165ED1CE76B";
    std::string Exponent2_str = "2FCAF10B552AAF4E4229D1625D5BFD7B2A2513D6E6020F0EFA3EEC60F0779987AE034BAC8A9DAD769D2C93B890877A11FA5B2F6D56633F32C0FFF4A84AD96903AA7E74F8D124317F66CFB5792F8A9140F8062E9AC3488F311C7335B93CDD9E33F6D5EA5E482A08F042B4546047C9A6C10C430F2E100D13E804DC0BE8FCB223C1";
    std::string Coefficient_str = "F178DEBEF1A812C50F07C01835F55D5EC5C1B71F967FEDDFCD2BC5DCC3A8A791D3A3929501B9C59E5BBA069F573C66A63BBB28BA0D20ADE775687B9EE02EF2D82F9B862CEEB871219E90B2F718B12D3795C73C055B7646437F9EAAC728D6A8E9324529128CD3A75375439EA264A9C61C17F423410D37DB8B2027F20D529D8EE4";
    Modulus.resize(Modulus_str.size() / 2);
    PublicExponent.resize(PublicExponent_str.size() / 2);
    PrivateExponent.resize(PrivateExponent_str.size() / 2);
    Factor1.resize(Factor1_str.size() / 2);
    Factor2.resize(Factor2_str.size() / 2);
    Exponent1.resize(Exponent1_str.size() / 2);
    Exponent2.resize(Exponent2_str.size() / 2);
    Coefficient.resize(Coefficient_str.size() / 2);
    Base16Decode_Func(Modulus_str.c_str(), Modulus_str.size(), Modulus.data(), Modulus.size());
    Base16Decode_Func(PublicExponent_str.c_str(), PublicExponent_str.size(), PublicExponent.data(), PublicExponent.size());
    Base16Decode_Func(PrivateExponent_str.c_str(), PrivateExponent_str.size(), PrivateExponent.data(), PrivateExponent.size());
    Base16Decode_Func(Factor1_str.c_str(), Factor1_str.size(), Factor1.data(), Factor1.size());
    Base16Decode_Func(Factor2_str.c_str(), Factor2_str.size(), Factor2.data(), Factor2.size());
    Base16Decode_Func(Exponent1_str.c_str(), Exponent1_str.size(), Exponent1.data(), Exponent1.size());
    Base16Decode_Func(Exponent2_str.c_str(), Exponent2_str.size(), Exponent2.data(), Exponent2.size());
    Base16Decode_Func(Coefficient_str.c_str(), Coefficient_str.size(), Coefficient.data(), Coefficient.size());

    size_t keysize = Modulus.size() * 8;
    std::vector<unsigned char> publicKey;
    std::vector<unsigned char> privateKey;
    publicKey.resize(keysize);
    privateKey.resize(keysize);

    EXPORT_RSA paramters = {
        0,
        //ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_DER,
        ASYMMETRIC_KEY_FORMAT::ASYMMETRIC_KEY_PEM,
        Modulus.data(),
        PublicExponent.data(),
        PrivateExponent.data(),
        Factor1.data(),
        Factor2.data(),
        Exponent1.data(),
        Exponent2.data(),
        Coefficient.data(),
        Modulus.size(),
        PublicExponent.size(),
        PrivateExponent.size(),
        Factor1.size(),
        Factor2.size(),
        Exponent1.size(),
        Exponent2.size(),
        Coefficient.size(),
        publicKey.data(),
        privateKey.data(),
        publicKey.size(),
        privateKey.size(),
    };
    RsaExportKeys_Func(&paramters);

    publicKey.resize(paramters.PUBLIC_KEY_LENGTH);
    privateKey.resize(paramters.PRIVATE_KEY_LENGTH);

    std::cout << "Key Length (Bits):" << paramters.KEY_LENGTH << std::endl;

    /*char* pubString = new char[paramters.PUBLIC_KEY_LENGTH * 2 + 1] {};
    char* privString = new char[paramters.PRIVATE_KEY_LENGTH * 2 + 1] {};
    Base16Encode_Func(paramters.PUBLIC_KEY, paramters.PUBLIC_KEY_LENGTH, pubString, paramters.PUBLIC_KEY_LENGTH * 2 + 1);
    Base16Encode_Func(paramters.PRIVATE_KEY, paramters.PRIVATE_KEY_LENGTH, privString, paramters.PRIVATE_KEY_LENGTH * 2 + 1);
    std::cout << pubString << std::endl;
    std::cout << privString << std::endl;*/

    std::cout << paramters.PUBLIC_KEY << std::endl;
    std::cout << paramters.PRIVATE_KEY << std::endl;
}

int main() {
#if _WIN32
	EnableVirtualTerminalProcessing();
#endif

    //Test_GetRsaParametersLength();

    Test_GetRsaKeyLength();

    //Test_GenerateRsaParameters();

    //Test_RsaGenerate();

    //Test_ExportRsaParametersFromKeys();

    //Test_ExportRsaKeyFromParameters();
}