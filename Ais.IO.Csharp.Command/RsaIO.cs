using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Runtime.ConstrainedExecution;
using System.Runtime.Intrinsics.Arm;
using System.Text;
using System.Threading.Tasks;

namespace Ais.IO.Csharp.Command
{
    internal class RsaIO
    {
        public static void GetParamters(ulong size)
        {
            Rsa rsa = new Rsa();
            BaseEncoding encoder = new BaseEncoding(EncodingType.Base16);
            RsaParamters paramters = rsa.GenerateParamters(size);
            if (paramters == null)
                return;
            Console.WriteLine("Modulus (N):\n" + encoder.Encode<string>(paramters.N));
            Console.WriteLine("Public Exponent (E):\n" + encoder.Encode<string>(paramters.E));
            Console.WriteLine("Private Exponent (D):\n" + encoder.Encode<string>(paramters.D));
            Console.WriteLine("First Prime Factor (P):\n" + encoder.Encode<string>(paramters.P));
            Console.WriteLine("Second Prime Factor (Q):\n" + encoder.Encode<string>(paramters.Q));
            Console.WriteLine("First CRT Exponent (DP):\n" + encoder.Encode<string>(paramters.DP));
            Console.WriteLine("Second CRT Exponent (DQ):\n" + encoder.Encode<string>(paramters.DQ));
            Console.WriteLine("CRT Coefficient (QI):\n" + encoder.Encode<string>(paramters.QI));
        }

        public static void GeneratePEM(ulong size)
        {
            Rsa rsa = new Rsa();
            BaseEncoding encoder = new BaseEncoding(EncodingType.Base16);
            byte[] publicKey = [];
            byte[] privateKey = [];
            rsa.Generate(size, ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_PEM, ref publicKey, ref privateKey);

            if (publicKey.Length == 0 || privateKey.Length == 0)
                return;
            Console.WriteLine($"[Public Key ({size} PEM)]\n" + Encoding.UTF8.GetString(publicKey));
            Console.WriteLine($"[Private Key ({size} PEM)]\n" + Encoding.UTF8.GetString(privateKey));
        }

        public static void GenerateDER(ulong size)
        {
            Rsa rsa = new Rsa();
            BaseEncoding encoder = new BaseEncoding(EncodingType.Base16);
            byte[] publicKey = [];
            byte[] privateKey = [];
            rsa.Generate(size, ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_DER, ref publicKey, ref privateKey);
            
            if (publicKey.Length == 0 || privateKey.Length == 0)
                return;
            Console.WriteLine($"[Public Key ({size} DER)]\n" + encoder.Encode<string>(publicKey));
            Console.WriteLine($"[Private Key ({size} DER)]\n" + encoder.Encode<string>(privateKey));
        }

        public static void ToParamtersPEM()
        {
            Rsa rsa = new Rsa();
            BaseEncoding encoder = new BaseEncoding(EncodingType.Base16);
            string publickey = 
"-----BEGIN PUBLIC KEY-----\n" +
"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8PKwSuU2844LlgxwP3ZY\n" +
"18hTOrPByVp1VZXMhXdoRH+EGfD0guol+3c1ZB7AkEy/B0NjV+vkC2ls/24pQlwf\n" +
"oV/LJQbiXOPg59XqEweKx2zhHNcE1VEULH0sz9Rk7atQqe/jc4BfoekqmW7YrDyi\n" +
"ryswEVwodW53w/FfezS8A2NEdtyUE9IVfWfKGI5dSXqe8ajGD5Q9rgdGl7GqYVsv\n" +
"OGFlurnvY6vh7avQsypM20AxlVQtw0RCkf6d2MlUz1SR/jBiP13B4BJ8nrnDPUvl\n" +
"NNAE1voD1qvV+qCNotI6aJ/2uPjKG3oRkbeFpH0RVDBpS2xVRiwqiOuaJpUlwPzn\n" +
"swIDAQAB\n" +
"-----END PUBLIC KEY-----\n";
            string privatekey =
"-----BEGIN PRIVATE KEY-----\n" + 
"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDw8rBK5TbzjguW\n" + 
"DHA/dljXyFM6s8HJWnVVlcyFd2hEf4QZ8PSC6iX7dzVkHsCQTL8HQ2NX6+QLaWz/\n" + 
"bilCXB+hX8slBuJc4+Dn1eoTB4rHbOEc1wTVURQsfSzP1GTtq1Cp7+NzgF+h6SqZ\n" + 
"btisPKKvKzARXCh1bnfD8V97NLwDY0R23JQT0hV9Z8oYjl1Jep7xqMYPlD2uB0aX\n" + 
"saphWy84YWW6ue9jq+Htq9CzKkzbQDGVVC3DREKR/p3YyVTPVJH+MGI/XcHgEnye\n" + 
"ucM9S+U00ATW+gPWq9X6oI2i0jpon/a4+MobehGRt4WkfRFUMGlLbFVGLCqI65om\n" + 
"lSXA/OezAgMBAAECggEAFkGkooEXxARGnQlFw7xFKpwjgVRMvd0FjO6gYg0Mlunc\n" + 
"eZ+gm7Ml57De6qz4hpvAODCJAvxpfTBeKXNd4PZXfvWKnen2i4lfzf/Gy76Hmtzm\n" + 
"J7Qo4Hdz0JmOGR3Pu4XL7AFFAPdGXiixOakGif+z21Bhnp46UoFDaNhpRHKI53Bc\n" + 
"Y2fKqgksXMECEV+wAqKrImLs2vQNxpQ/uB8StAe1YdDUhjS9vPnnl6nm22YIqcbE\n" + 
"e9RGpQspNzduOEKRzGWgORSUZl+lGDuln2TctzUdmlAjpgEbwg+qfq8Z3H/gPz2H\n" + 
"TVjKCLOG1jOtka5aQRzp2F4J4uGUmTjttN2BKQIVIQKBgQD+iedpKCh8qkIoDuuK\n" + 
"7iHQFgKDG1hUReoAfIQ76vLBYl0ZBrBumSqVlZyxx9da286BMPYPyJ5oZ7FFDDNP\n" + 
"Mkua/HnBrgMUBeKh0IkCmR5URaRFHDaJ5llYisGtCFskvtPVKEIWn0cK8+ZVk/XQ\n" + 
"JJKaRhwfGo+GMxtNLs2CU7BuowKBgQDyVM94vRFJEmiuhldAChFru0vaTzbgdQLj\n" + 
"Ke5Jx67V/5doGslpCXICD70zP0ygq869oZyHY/8csnjCNYbPSc68Vj4AFdBR3bUy\n" + 
"OluZomUZT3VcUUdB0JohmZWGs3Rjjbo0wWI/xwMTgwbch52n+C7uIhaldniJGIBZ\n" + 
"sPrnrEGDsQKBgQCCaNMYDEwZ+v0kGujQ6EqImw40b8kkfCF0mFcDf89aBvRdwxCX\n" + 
"yX+I3ftHFnUehulZRWV8FrQaF646CxMqq0ETKfGTqnzHQHCpqPbZTuu8D2YnRlom\n" + 
"8s6pz4WFCnfv7pkHZ7Xcc0RptyY2iDTzrBk0U2FLCkeoYPzG4YjHEeud8wKBgDve\n" + 
"Rg9/LkkOOjx7xgx1ME6cTCYYEeesINV8Y3lo0sHdzksS6xV/FuJ5fvWtOsIrD/17\n" + 
"cs9kHf+5++mHDdIiWufeqpycxwWir4RENKMlIrL5FXaEQgV5gsqwReesaCG8PveP\n" + 
"mzVEdncYlNZgzstTnkyIsW2Zcjf0jKkb9zDLNrhRAoGBAJQJu0LIcZcTgVGkCpC+\n" + 
"JDnppBBJesn16nDXWN5AI0J04wPvxgAp3Xt2ytpFCyzHFdI44QJny3m0PCzHw1+3\n" + 
"Pahq06hJsSCAhXAiQ62KtM9+zaGGfkL9eEmASdVZpj0tt47fZe19yI59ea7/MPTO\n" + 
"RSvW4mwBKHm3TQHH6SyQAbVC\n" + 
"-----END PRIVATE KEY-----\n";

            RsaParamters paramters = rsa.ToParamters(ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_PEM, Encoding.UTF8.GetBytes(publickey), Encoding.UTF8.GetBytes(privatekey));
            if (paramters == null)
                return;
            Console.WriteLine("Modulus (N):\n" + encoder.Encode<string>(paramters.N));
            Console.WriteLine("Public Exponent (E):\n" + encoder.Encode<string>(paramters.E));
            Console.WriteLine("Private Exponent (D):\n" + encoder.Encode<string>(paramters.D));
            Console.WriteLine("First Prime Factor (P):\n" + encoder.Encode<string>(paramters.P));
            Console.WriteLine("Second Prime Factor (Q):\n" + encoder.Encode<string>(paramters.Q));
            Console.WriteLine("First CRT Exponent (DP):\n" + encoder.Encode<string>(paramters.DP));
            Console.WriteLine("Second CRT Exponent (DQ):\n" + encoder.Encode<string>(paramters.DQ));
            Console.WriteLine("CRT Coefficient (QI):\n" + encoder.Encode<string>(paramters.QI));
        }

        public static void ToParamtersDER()
        {
            Rsa rsa = new Rsa();
            BaseEncoding encoder = new BaseEncoding(EncodingType.Base16);
            byte[] publickey = encoder.Decode<byte[]>("30820122300D06092A864886F70D01010105000382010F003082010A0282010100CCF2C9B696D736D2F799734EFA29E69FED72A80205AA2A33A73FC844CC563FACB606978A22F82F2E01F9B87EB21FE042FC14A549A56B06EED43D67B90444458FDD4E3B6762D8DFF08A4DD25039C2BD9769EFC63D50138FCD4639E28895307827C6847CDFC56F19FE7A9DABF77FC09879B666350DC6BB4FFF27821E818B8C8355CE36CF839BDD1C7F17675FE09F0513D1888890CA10694D25A5C32A7AA4E1C51BE394724E86F165733E7D929AB2F0F293978D00AC2A43EB2826E9DA8E4324AFE7AB272F15BE1E790299E5970D9994E05AC21F1FF982AD2EF68EF48815E4EAC86C8305DA8A80990DC1B06CFC1C3B00CD6882911DF1E36D716F048A3AE12141629B0203010001");
            byte[] privatekey = encoder.Decode<byte

            RsaParamters paramters = rsa.ToParamters(ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_DER, publickey, privatekey);
            if (paramters == null)
                return;
            Console.WriteLine("Modulus (N):\n" + encoder.Encode<string>(paramters.N));
            Console.WriteLine("Public Exponent (E):\n" + encoder.Encode<string>(paramters.E));
            Console.WriteLine("Private Exponent (D):\n" + encoder.Encode<string>(paramters.D));
            Console.WriteLine("First Prime Factor (P):\n" + encoder.Encode<string>(paramters.P));
            Console.WriteLine("Second Prime Factor (Q):\n" + encoder.Encode<string>(paramters.Q));
            Console.WriteLine("First CRT Exponent (DP):\n" + encoder.Encode<string>(paramters.DP));
            Console.WriteLine("Second CRT Exponent (DQ):\n" + encoder.Encode<string>(paramters.DQ));
            Console.WriteLine("CRT Coefficient (QI):\n" + encoder.Encode<string>(paramters.QI));
        }

        public static void ToKeysPEM()
        {
            Rsa rsa = new Rsa();
            BaseEncoding encoder = new BaseEncoding(EncodingType.Base16);
            RsaParamters paramters = new RsaParamters()
            {
                N = encoder.Decode<byte[]>("F0F2B04AE536F38E0B960C703F7658D7C8533AB3C1C95A755595CC857768447F8419F0F482EA25FB7735641EC0904CBF07436357EBE40B696CFF6E29425C1FA15FCB2506E25CE3E0E7D5EA13078AC76CE11CD704D551142C7D2CCFD464EDAB50A9EFE373805FA1E92A996ED8AC3CA2AF2B30115C28756E77C3F15F7B34BC03634476DC9413D2157D67CA188E5D497A9EF1A8C60F943DAE074697B1AA615B2F386165BAB9EF63ABE1EDABD0B32A4CDB403195542DC3444291FE9DD8C954CF5491FE30623F5DC1E0127C9EB9C33D4BE534D004D6FA03D6ABD5FAA08DA2D23A689FF6B8F8CA1B7A1191B785A47D115430694B6C55462C2A88EB9A269525C0FCE7B3"),
                E = encoder.Decode<byte[]>("010001"),
                D = encoder.Decode<byte[]>("1641A4A28117C404469D0945C3BC452A9C2381544CBDDD058CEEA0620D0C96E9DC799FA09BB325E7B0DEEAACF8869BC038308902FC697D305E29735DE0F6577EF58A9DE9F68B895FCDFFC6CBBE879ADCE627B428E07773D0998E191DCFBB85CBEC014500F7465E28B139A90689FFB3DB50619E9E3A52814368D869447288E7705C6367CAAA092C5CC102115FB002A2AB2262ECDAF40DC6943FB81F12B407B561D0D48634BDBCF9E797A9E6DB6608A9C6C47BD446A50B2937376E384291CC65A0391494665FA5183BA59F64DCB7351D9A5023A6011BC20FAA7EAF19DC7FE03F3D874D58CA08B386D633AD91AE5A411CE9D85E09E2E1949938EDB4DD8129021521"),
                P = encoder.Decode<byte[]>("FE89E76928287CAA42280EEB8AEE21D01602831B585445EA007C843BEAF2C1625D1906B06E992A95959CB1C7D75ADBCE8130F60FC89E6867B1450C334F324B9AFC79C1AE031405E2A1D08902991E5445A4451C3689E659588AC1AD085B24BED3D52842169F470AF3E65593F5D024929A461C1F1A8F86331B4D2ECD8253B06EA3"),
                Q = encoder.Decode<byte[]>("F254CF78BD11491268AE8657400A116BBB4BDA4F36E07502E329EE49C7AED5FF97681AC9690972020FBD333F4CA0ABCEBDA19C8763FF1CB278C23586CF49CEBC563E0015D051DDB5323A5B99A265194F755C514741D09A21999586B374638DBA34C1623FC703138306DC879DA7F82EEE2216A5767889188059B0FAE7AC4183B1"),
                DP = encoder.Decode<byte[]>("8268D3180C4C19FAFD241AE8D0E84A889B0E346FC9247C21749857037FCF5A06F45DC31097C97F88DDFB4716751E86E95945657C16B41A17AE3A0B132AAB411329F193AA7CC74070A9A8F6D94EEBBC0F6627465A26F2CEA9CF85850A77EFEE990767B5DC734469B726368834F3AC193453614B0A47A860FCC6E188C711EB9DF3"),
                DQ = encoder.Decode<byte[]>("3BDE460F7F2E490E3A3C7BC60C75304E9C4C261811E7AC20D57C637968D2C1DDCE4B12EB157F16E2797EF5AD3AC22B0FFD7B72CF641DFFB9FBE9870DD2225AE7DEAA9C9CC705A2AF844434A32522B2F915768442057982CAB045E7AC6821BC3EF78F9B354476771894D660CECB539E4C88B16D997237F48CA91BF730CB36B851"),
                QI = encoder.Decode<byte[]>("9409BB42C87197138151A40A90BE2439E9A410497AC9F5EA70D758DE40234274E303EFC60029DD7B76CADA450B2CC715D238E10267CB79B43C2CC7C35FB73DA86AD3A849B1208085702243AD8AB4CF7ECDA1867E42FD78498049D559A63D2DB78EDF65ED7DC88E7D79AEFF30F4CE452BD6E26C012879B74D01C7E92C9001B542"),
            };
            byte[] publicKey = new byte[0];
            byte[] privateKey = new byte[0];
            rsa.ToKeys(paramters, ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_PEM, ref publicKey, ref privateKey);
            ulong size = rsa.GetKeyLength(ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_PEM, publicKey, privateKey);
            Console.WriteLine($"[Public Key ({size} PEM)]\n" + Encoding.UTF8.GetString(publicKey));
            Console.WriteLine($"[Private Key ({size} PEM)]\n" + Encoding.UTF8.GetString(privateKey));
        }

        public static void ToKeysDER()
        {
            Rsa rsa = new Rsa();
            BaseEncoding encoder = new BaseEncoding(EncodingType.Base16);
            RsaParamters paramters = new RsaParamters()
            {
                N = encoder.Decode<byte[]>("CCF2C9B696D736D2F799734EFA29E69FED72A80205AA2A33A73FC844CC563FACB606978A22F82F2E01F9B87EB21FE042FC14A549A56B06EED43D67B90444458FDD4E3B6762D8DFF08A4DD25039C2BD9769EFC63D50138FCD4639E28895307827C6847CDFC56F19FE7A9DABF77FC09879B666350DC6BB4FFF27821E818B8C8355CE36CF839BDD1C7F17675FE09F0513D1888890CA10694D25A5C32A7AA4E1C51BE394724E86F165733E7D929AB2F0F293978D00AC2A43EB2826E9DA8E4324AFE7AB272F15BE1E790299E5970D9994E05AC21F1FF982AD2EF68EF48815E4EAC86C8305DA8A80990DC1B06CFC1C3B00CD6882911DF1E36D716F048A3AE12141629B"),
                E = encoder.Decode<byte[]>("010001"),
                D = encoder.Decode<byte[]>("017398C27922B0BF36C4B8A08467669197121AFC2F591605194D50D84D3ADBD197D51D1EA6826BD1CA197583E434134260DC593D57CAC06E519A2BBC0F8FD78EF374CF393B65D37EE07938F6462A746DA2F0F14E54325C9ADF6BF532F2C78DEFA38423099CB18840195338E4145CB8AD12AC7A4F622B1D1FC4025E6A9C229478345D2B6B013ED8F68273C07B29103925F36F4BE2232FD57B2EDE0186CE48C930E0DC254D4B9AA677FF9F9AEB99017A03059282A63E60DBA7478B0CAD690A18BFCB3997435589630E61AE79506555F7572ABFEFCCFCAC859FD61FDDC405840B9C6D05DC579980205BA464D49354D70894C71CBB885046FDEFACCA50EF5BDA7209"),
                P = encoder.Decode<byte[]>("E7E231E1350062A654F5892D282286F60FEB168AE909309130CC16826D49609814AB03B7B0F583ECACDB99A5C07FDDB9CF743F496064569FD5A81B22FC919762F23A3F83B659D3A29C8762211EDDADEFA69C92CA1B5A7284DDAA38B48C2BC6F96EF840463700F09E91DE3669B68C300C927D6E31B69C2335B576A7B5B29E3A13"),
                Q = encoder.Decode<byte[]>("E243747310722A9EE56A0FEC9D5F4321EDC51A97E9292462427CF93B8405E25B26AEE185E1DF295368F2498D3580CA4DBD5300C361DAC8645C1B1C771B17941EE35D5CA14ECB077D8C9197CF8894720BD3D8A7553276B251A8A13C6A1B94ED84BEC6B6C8BD90D693DC05A49BC481CD89B320A8D4C7429E497437AAE175EA4659"),
                DP = encoder.Decode<byte[]>("8FA14A2826FE501C9B2F6382B7037BF95A2ED1CDC53ECDF880F349560C7F90F76285F34D8AACE8C466E5B72C362A7D9AA4676AF3F662F04D1CB87DE693EF52881566030580A3EF352023B3A2B44DB779640843DC30493BFA149B6578600295C2D6FBAA4453B99F517924DD2B69C937D1F1C303C88345FF813B1F7E0E4BCF3A45"),
                DQ = encoder.Decode<byte[]>("61000A2C4A20A7A4F735411E6F5927AEA4009C26040F5F49C0B75321F0B79512FEC27A6CAB28C0CEC16F1D992C16CAA409464C4D76E61482F1F9AD7A6262F95D449C01DA25AD64C8AE3ABC9A7C3327B16A60B75C0F0653EC2E1EF1878BCB8D081BC1951AFA29DDD405BF659261EC43F18499BBC77CA552B6AADC32A5F5A73A01"),
                QI = encoder.Decode<byte[]>("E127C80C0E3AA6C40247CCEDBD321B10A8DA0FC9922CBC88D36B63381C92C2FBD2669FB923B5B9B935F54FF7EC7FF68874F8E95AF75CB4CD0C2C1C7584BD426CDFC63919F75352B1B76AE588DEDF4466F6895F4A203D75B0B4720BD66A6A7CC2BA9CAC589F6BB1C290FD581AF76FD52CBCE7C95EAC6F35CFE046BC804AC0AEAF"),
            };
            byte[] publicKey = new byte[0];
            byte[] privateKey = new byte[0];
            rsa.ToKeys(paramters, ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_DER, ref publicKey, ref privateKey);
            ulong size = rsa.GetKeyLength(ASYMMETRIC_KEY_FORMAT.ASYMMETRIC_KEY_DER, publicKey, privateKey);
            Console.WriteLine($"[Public Key ({size} DER)]\n" + encoder.Encode<string>(publicKey));
            Console.WriteLine($"[Private Key ({size} DER)]\n" + encoder.Encode<string>(privateKey));
        }
    }
}
