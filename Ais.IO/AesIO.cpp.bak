#include "pch.h"
#include "AesIO.h"
#include <openssl/evp.h>
#include <openssl/rand.h>
#include <openssl/err.h>
#include <cstring>
#include <iostream>
#include <random>
#include <ctime>
#include <algorithm>
#include <string>

// Handle Errors
void handleErrors(std::string message) {
    std::cerr << "ERROR: " << message << std::endl;
    ERR_print_errors_fp(stderr);
    exit(1);
}

void longlong_to_bytes(long long counter, unsigned char* buffer, int buffer_size) {
    // Buffer size must be at least 8 bytes to store the counter
    if (buffer_size < 8) {
        std::cerr << "Buffer size too small" << std::endl;
        return;
    }

    // Store the counter in the buffer (little-endian order)
    for (int i = 0; i < 8; ++i) {
        buffer[i] = (unsigned char)((counter >> (i * 8)) & 0xFF);
    }
}

int GenerateKey(unsigned char* key, size_t keyLength) {
    if (keyLength != 16 && keyLength != 24 && keyLength != 32) {
        handleErrors("Invalid key length. Use 128, 192, or 256 bits.");
        return -1;
    }
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 255);

    for (size_t i = 0; i < keyLength; ++i)
        key[i] = static_cast<unsigned char>(dis(gen));
    return 0;
}

int GenerateIV(unsigned char* iv, size_t ivLength) {
    if (ivLength != 16) {
        handleErrors("Invalid IV length. Use 128 bits.");
        return -1;
    }
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 255);

    for (size_t i = 0; i < ivLength; ++i)
        iv[i] = static_cast<unsigned char>(dis(gen));
    return 0;
}

int GenerateKeyFromInput(const unsigned char* input, size_t inputLength, unsigned char* key, size_t keyLength) {
    if (keyLength != 16 && keyLength != 24 && keyLength != 32) {
        handleErrors("Invalid key length. Use 128, 192, or 256 bits.");
        return -1;
    }

    memset(key, 0, keyLength);
    memcpy(key, input, inputLength > keyLength ? keyLength : inputLength);
    return 0;
}

int GenerateIVFromInput(const unsigned char* input, size_t inputLength, unsigned char* iv, size_t ivLength) {
    if (ivLength != 16) {
        handleErrors("Invalid IV length. Use 128 bits.");
        return -1;
    }

    memset(iv, 0, ivLength);
    memcpy(iv, input, inputLength > ivLength ? ivLength : inputLength);
    return 0;
}

int AesCtrEncrypt(AES_CTR_ENCRYPT* encryption) {
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx)
        handleErrors("An error occurred during key/iv generation");

    const int BLOCK_SIZE = 16;

    unsigned char iv_with_counter[16];
    int len = 0;
    int ciphertext_len = 0;

    int total_blocks = (encryption->PLAIN_TEXT_LENGTH + BLOCK_SIZE - 1) / BLOCK_SIZE;

    for (int i = 0; i < total_blocks; ++i) {
        memcpy(iv_with_counter, encryption->IV, 16);
        uint64_t* counter_ptr = reinterpret_cast<uint64_t*>(&iv_with_counter[8]);
        *counter_ptr = encryption->COUNTER + i;

        if (1 != EVP_EncryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, encryption->KEY, iv_with_counter))
            handleErrors("Initialize AES CTR encryption for the current block failed.");

        int current_block_size = (BLOCK_SIZE < (encryption->PLAIN_TEXT_LENGTH - (i * BLOCK_SIZE)))
                                ? BLOCK_SIZE
                                : (encryption->PLAIN_TEXT_LENGTH - (i * BLOCK_SIZE));

        if (1 != EVP_EncryptUpdate(ctx, encryption->CIPHER_TEXT + ciphertext_len, &len, encryption->PLAIN_TEXT + (i * BLOCK_SIZE), current_block_size))
            handleErrors("Encrypt the current block failed.");
        ciphertext_len += len;
    }

    if (1 != EVP_EncryptFinal_ex(ctx, encryption->CIPHER_TEXT + ciphertext_len, &len))
        handleErrors("Finalize encryption failed.");
    ciphertext_len += len;

    EVP_CIPHER_CTX_free(ctx);
    return ciphertext_len;
}

int AesCtrDecrypt(AES_CTR_DECRYPT* decryption) {
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx)
        handleErrors("An error occurred during key/iv generation");

    const int BLOCK_SIZE = 16;

    unsigned char iv_with_counter[16];
    int len = 0;
    int plaintext_len = 0;

    int total_blocks = (decryption->CIPHER_TEXT_LENGTH + BLOCK_SIZE - 1) / BLOCK_SIZE;

    for (int i = 0; i < total_blocks; ++i) {
        memcpy(iv_with_counter, decryption->IV, 16);
        uint64_t* counter_ptr = reinterpret_cast<uint64_t*>(&iv_with_counter[8]);
        *counter_ptr = decryption->COUNTER + i;

        if (1 != EVP_DecryptInit_ex(ctx, EVP_aes_256_ctr(), NULL, decryption->KEY, iv_with_counter))
            handleErrors("Initialize AES CTR decryption for the current block failed.");

        int current_block_size = (BLOCK_SIZE < (decryption->CIPHER_TEXT_LENGTH - (i * BLOCK_SIZE)))
                                ? BLOCK_SIZE
                                : (decryption->CIPHER_TEXT_LENGTH - (i * BLOCK_SIZE));

        if (1 != EVP_DecryptUpdate(ctx, decryption->PLAIN_TEXT + plaintext_len, &len, decryption->CIPHER_TEXT + (i * BLOCK_SIZE), current_block_size))
            handleErrors("Decrypt the current block failed.");
        plaintext_len += len;
    }

    if (1 != EVP_DecryptFinal_ex(ctx, decryption->PLAIN_TEXT + plaintext_len, &len))
        handleErrors("Finalize decryption failed.");
    plaintext_len += len;

    EVP_CIPHER_CTX_free(ctx);
    return plaintext_len;
}

int AesCbcEncrypt(AES_CBC_ENCRYPT* encryption) {
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx)
        handleErrors("An error occurred during key/iv generation");

    if (encryption->PKCS7_PADDING == false && encryption->PLAIN_TEXT_LENGTH % 16 != 0)
        handleErrors("PlainText block must be 16 bytes, But you give " + std::to_string(encryption->PLAIN_TEXT_LENGTH));

    if (1 != EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, encryption->KEY, encryption->IV))
        handleErrors("Initialize AES CBC encryption for the current block failed.");

    EVP_CIPHER_CTX_set_padding(ctx, encryption->PKCS7_PADDING ? 1 : 0);

    int len = 0;
    int ciphertext_len = 0;
    if (1 != EVP_EncryptUpdate(ctx, encryption->CIPHER_TEXT, &len, encryption->PLAIN_TEXT, encryption->PLAIN_TEXT_LENGTH))
        handleErrors("Encrypt the current block failed.");
    ciphertext_len += len;

    if (1 != EVP_EncryptFinal_ex(ctx, encryption->CIPHER_TEXT + len, &len))
        handleErrors("Final encryption failed.");
    ciphertext_len += len;

    EVP_CIPHER_CTX_free(ctx);
    return ciphertext_len;
}

int AesCbcDecrypt(AES_CBC_DECRYPT* decryption) {
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    if (!ctx)
        handleErrors("An error occurred during key/iv generation");

    if (decryption->PKCS7_PADDING == false && decryption->CIPHER_TEXT_LENGTH % 16 != 0)
        handleErrors("CipherText block must be 16 bytes, But you give " + std::to_string(decryption->CIPHER_TEXT_LENGTH));

    if (1 != EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, decryption->KEY, decryption->IV))
        handleErrors("Initialize AES CBC decryption for the current block failed.");

    EVP_CIPHER_CTX_set_padding(ctx, decryption->PKCS7_PADDING ? 1 : 0);

    int len = 0;
    int plaintext_len = 0;
    if (1 != EVP_DecryptUpdate(ctx, decryption->PLAIN_TEXT, &len, decryption->CIPHER_TEXT, decryption->CIPHER_TEXT_LENGTH))
        handleErrors("Decrypt the current block failed.");
    plaintext_len += len;

    if (1 != EVP_DecryptFinal_ex(ctx, decryption->PLAIN_TEXT + len, &len))
        handleErrors("Final decryption failed.");
    plaintext_len += len;

    EVP_CIPHER_CTX_free(ctx);
    return plaintext_len;
}